"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[236],{9613:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>p});var o=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),u=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return o.createElement(c.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),m=u(n),p=r,d=m["".concat(c,".").concat(p)]||m[p]||f[p]||l;return n?o.createElement(d,i(i({ref:t},s),{},{components:n})):o.createElement(d,i({ref:t},s))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var u=2;u<l;u++)i[u]=n[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7788:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>l,metadata:()=>a,toc:()=>u});var o=n(2081),r=(n(9496),n(9613));const l={},i="inFlight",a={unversionedId:"in-flight/readme",id:"in-flight/readme",title:"inFlight",description:"inFlight({ effects: [] })",source:"@site/../src/in-flight/readme.md",sourceDirName:"in-flight",slug:"/in-flight/",permalink:"/methods/in-flight/",draft:!1,editUrl:"https://github.com/effector/patronum/tree/main/src/../src/in-flight/readme.md",tags:[],version:"current",frontMatter:{},sidebar:"methodsSidebar",previous:{title:"format",permalink:"/methods/format/"},next:{title:"interval",permalink:"/methods/interval/"}},c={},u=[{value:"<code>inFlight({ effects: [] })</code>",id:"inflight-effects--",level:2},{value:"Motivation",id:"motivation",level:3},{value:"Formulae",id:"formulae",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2},{value:"<code>inFlight({ domain })</code>",id:"inflight-domain-",level:2},{value:"Motivation",id:"motivation-1",level:3},{value:"Formulae",id:"formulae-1",level:3},{value:"Arguments",id:"arguments-1",level:3},{value:"Returns",id:"returns-1",level:2},{value:"Example",id:"example-1",level:2}],s={toc:u};function f(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"inflight"},"inFlight"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { inFlight } from 'patronum';\n// or\nimport { inFlight } from 'patronum/in-flight';\n")),(0,r.kt)("h2",{id:"inflight-effects--"},(0,r.kt)("inlineCode",{parentName:"h2"},"inFlight({ effects: [] })")),(0,r.kt)("h3",{id:"motivation"},"Motivation"),(0,r.kt)("p",null,"Method allows to calculate total current in flight states of each passed effect.\nIt is useful when you want to show pending state of complex process."),(0,r.kt)("h3",{id:"formulae"},"Formulae"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"$count = inFlight({ effects: [fx1, fx2] });\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Count all pending runs of effects in one store")),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"effects")," ",(0,r.kt)("inlineCode",{parentName:"li"},"(Array<Effect<any, any, any>>)")," - array of any effects")),(0,r.kt)("h2",{id:"returns"},"Returns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$count")," ",(0,r.kt)("inlineCode",{parentName:"li"},"(Store<number>)")," - Store with count of run effects in pending state")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createEffect } from 'effector';\nimport { inFlight } from 'patronum/in-flight';\n\nconst loadFirst = createEffect().use(() => Promise.resolve(null));\nconst loadSecond = createEffect().use(() => Promise.resolve(2));\nconst $count = inFlight({ effects: [loadFirst, loadSecond] });\n\n$count.watch((count) => console.info(`count: ${count}`));\n// => count: 0\n\nloadFirst();\nloadSecond();\n// => count: 2\n\nloadSecond();\nloadSecond();\n// => count: 4\n\n// Wait to resolve all effects\n// => count: 0\n")),(0,r.kt)("h2",{id:"inflight-domain-"},(0,r.kt)("inlineCode",{parentName:"h2"},"inFlight({ domain })")),(0,r.kt)("h3",{id:"motivation-1"},"Motivation"),(0,r.kt)("p",null,"This overload allows to count effects in flight of the whole domain.\nIt is usef when you want to show loading state of the whole application."),(0,r.kt)("h3",{id:"formulae-1"},"Formulae"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"$count = inFlight({ domain });\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Count all pending runs of effects in passed domain in one store")),(0,r.kt)("h3",{id:"arguments-1"},"Arguments"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"domain")," ",(0,r.kt)("inlineCode",{parentName:"li"},"(Domain)")," - domain to count effects from")),(0,r.kt)("h2",{id:"returns-1"},"Returns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$count")," ",(0,r.kt)("inlineCode",{parentName:"li"},"(Store<number>)")," - Store with count of run effects in pending state")),(0,r.kt)("h2",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createDomain } from 'effector';\nimport { inFlight } from 'patronum/in-flight';\n\nconst app = createDomain();\nconst loadFirst = app.createEffect().use(() => Promise.resolve(null));\nconst loadSecond = app.createEffect().use(() => Promise.resolve(2));\nconst $count = inFlight({ domain: app });\n\n$count.watch((count) => console.info(`count: ${count}`));\n// => count: 0\n\nloadFirst();\nloadSecond();\n// => count: 2\n\nloadSecond();\nloadSecond();\n// => count: 4\n\n// Wait to resolve all effects\n// => count: 0\n")))}f.isMDXComponent=!0}}]);